requirement_analysis:
  description: >
    Analyze the provided user input: {topic}.
    Use the statistics document to identify the most relevant metrics for the analysis.
    Validate the input data for consistency. Return a structured JSON with selected statistics,
    justifications, and clear categorizations (primary and secondary).
  expected_output: >
    A JSON object containing the following fields:
    - `requirements`: An object with:
      - `position` (string): Required player position.
      - `tactical_function` (string): Tactical role expected for the player.
      - `key_characteristics` (list of strings): Essential characteristics.
    - `primary_statistics` and `secondary_statistics`: Arrays of objects, each with:
      - `name` (string): Name of the statistic.
      - `importance` (string): Criticality level ("high," "medium," or "low").
      - `justification` (string): Reason for its importance.
      - `minimum_percentile` (integer): Required minimum percentile.
  agent: interpreter_agent

data_analysis:
  description: >
    Perform a database analysis to identify the 20 most suitable players based on the selected statistics.
    Weigh primary and secondary statistics dynamically according to their importance. Ensure robust
    statistical comparisons and properly handle missing data to maintain accuracy in ranking.
  expected_output: >
    A JSON object containing:
    - `analyzed_players` (integer): Total number of players analyzed.
    - `selected_players` (array of objects): Each object includes:
      - `player_id` (string): Identifier.
      - `name` (string): Player's name.
      - `current_team` (string): Current team.
      - `age` (integer): Player's age.
      - `match_score` (float, 0-10): Score based on requirements.
      - `key_statistics` (object): Each statistic name maps to:
        - `value` (float): Statistic value.
        - `percentile` (integer): Percentile ranking.
        - `comparison_to_requirements` (string): Comparison explanation.
      - `selection_justification` (string): Reason for selection.
    - `analysis_methodology` (string): Explanation of the selection process.
  agent: analyst_agent

report_generation:
  description: >
    Create a detailed report based on the selected players.
    The report should include individual analysis of each player and
    justifications for their selection. Include comparative analysis
    between players and clear recommendations
  expected_output: >
    A structured report containing:
            1. Executive Summary
            2. Analysis Methodology
            3. Player Profiles (for each player):
               - Player Name, Age, and Current Team
               - Statistical Analysis
               - Tactical Fit Assessment
               - Strengths and Areas for Development
            4. Comparative Analysis
            5. Recommendations
            6. Technical Appendix with detailed statistics
  agent: report_agent

markdown_generation:
  description: >
    Format the technical report in markdown, creating a clear,
    professional, and well-organized structure. Include proper headers,
    tables, and formatting for optimal readability. Ensure all technical
    content is properly formatted and easily navigable
  expected_output: >
    A markdown file containing:
            1. Title and Table of Contents
            2. All sections from the technical report properly formatted with:
               - Consistent header hierarchy
               - Well-formatted tables for statistics
               - Proper emphasis and highlighting
               - Clear section breaks
               - Formatted lists and bullet points
            3. Save the file as a .md file
  agent: markdown_agent